# -*- coding: utf-8 -*-
"""alpha_version_notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/169QqsfCcGUdHqy_AwOerpRm2zXCTCeWB
"""

from keras.layers import Conv2D, UpSampling2D, InputLayer, Conv2DTranspose
from keras.layers import Activation, Dense, Dropout, Flatten
from tensorflow.keras.layers import BatchNormalization
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import array_to_img, img_to_array, load_img
from keras.optimizers import Adam
from skimage.color import rgb2lab, lab2rgb, rgb2gray, xyz2lab
from skimage.io import imsave
import numpy as np
import os
import random
import tensorflow as tf

from skimage.transform import resize

from PIL import Image

#Get image
#image = img_to_array(load_img('image00050.jpg'))
#image = np.array(image, dtype=float)

# lab_image = rgb2lab(1.0/255 * image)
# X = lab_image[:, :, 0]
# Y = lab_image[:, :, 1:] / 128

# Redimensionar 'X' y 'Y' a la forma deseada
# X = resize(X, (400, 400))
# Y = resize(Y, (400, 400, 2))
# X = X.reshape(1, 400, 400, 1)
# Y = Y.reshape(1, 400, 400, 2)


# Función para aplicar el proceso de coloración a un cuadro
def colorize_frame(frame):
    # Preprocesar el cuadro de imagen (por ejemplo, convertir RGB a LAB)
    lab_frame = rgb2lab(frame)
    X = lab_frame[:, :, 0]
    X = resize(X, (400, 400))
    X = X.reshape(400, 400, 1)
    
    # Obtener la predicción del modelo para el cuadro
    output = model.predict(np.expand_dims(X, axis=0))
    output *= 128
    
    # Generar la imagen final en color
    colored_frame = np.zeros((400, 400, 3))
    colored_frame[:, :, 0] = X.reshape(400, 400)
    colored_frame[:, :, 1:] = output.reshape(400, 400, 2)
    
    # Convertir la imagen de LAB a RGB
    colored_frame = lab2rgb(colored_frame)
    
    return colored_frame


# Building the neural network
model = Sequential()
model.add(InputLayer(input_shape=(None, None, 1)))

model.add(Conv2D(8, (3, 3), activation='relu', padding='same', strides=2))
model.add(Conv2D(8, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(16, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(16, (3, 3), activation='relu', padding='same', strides=2))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same', strides=2))

model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same', strides=2))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same', strides=2))

model.add(UpSampling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(16, (3, 3), activation='relu', padding='same'))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(2, (3, 3), activation='tanh', padding='same'))

# Compile the model
optimizer = Adam(lr=0.001)
model.compile(optimizer=optimizer, loss='mse')

"""
# Train the model
model.fit(x=X,
          y=Y,
          batch_size=16,  # Ajustar el tamaño del lote según tus recursos de memoria
          epochs=100,  # Reducir las épocas si es necesario
          validation_split=0.2)  # Usar una parte de los datos como validación


# Evaluate the model
loss = model.evaluate(X, Y, batch_size=16)  # Ajustar el tamaño del lote según tus recursos de memoria
print("Loss:", loss)

# Generate output predictions
# output = model.predict(X)
# output *= 128

# Output colorizations
# cur = np.zeros((400, 400, 3))
# cur[:, :, 0] = X.reshape(400, 400)
# cur[:, :, 1:] = output.reshape(400, 400, 2)
# imsave("img_result.png", lab2rgb(cur))
# imsave("img_gray_version.png", rgb2gray(lab2rgb(cur)))

"""

# Abrir el archivo GIF
gif = Image.open('niño01.gif')
frames = []
for frame in range(gif.n_frames):
    # Obtener el cuadro actual
    gif.seek(frame)
    frame_image = gif.copy()
    
    # Convertir el cuadro a RGB si es necesario
    if frame_image.mode != 'RGB':
        frame_image = frame_image.convert('RGB')

    # Ajustar el tamaño del cuadro original si es necesario
    if frame_image.size != (400, 400):
        frame_image = frame_image.resize((400, 400), Image.BILINEAR)
    
    
    # Aplicar el proceso de coloración al cuadro
    colored_frame = colorize_frame(frame_image)
    
    # Agregar el cuadro coloreado a la lista de cuadros
    frames.append(colored_frame)

colored_frame = colorize_frame(np.array(frame_image))


# Guardar los cuadros coloreados en un nuevo GIF
frames[0].save('niño01.gif', save_all=True, append_images=frames[1:], duration=gif.info['duration'], loop=0)
